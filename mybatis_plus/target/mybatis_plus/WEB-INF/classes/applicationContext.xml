<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 加载属性文件  -->
    <context:property-placeholder  location="classpath:jdbc.properties"/>
    <!-- 2.配置MyBatis的会话工厂 -->
    <bean id="sqlSessionFactory"
          class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 给包下面的JavaBean起别名，别名的作用:在映射文件中resultType和parameterType中不用类的全名了，直接用别名 -->
        <!-- Car,car Car CaR-->
        <property name="typeAliasesPackage" value="com.fh.model"></property>
        <!-- 自动扫描MyBatis映射文件,省略掉SqlMapConfig.xml的mappers手工配置 -->
        <property name="mapperLocations" value="classpath:/mapper/*.xml"></property>
        <!-- 配置 Mybatis 配置文件（可无） -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 以上配置和传统 Mybatis 一致 -->
        <!-- MP 全局配置注入 -->
        <property name="globalConfig" ref="globalConfig" />
    </bean>
    <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <property name="dbConfig">
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
                <!--
                AUTO:数据库ID自增,
                NONE:该类型为未设置主键类型(将跟随全局)
                INPUT:用户输入ID
                【以下3种类型、只有当插入对象ID 为空，才自动填充。】
                ID_WORKER:全局唯一ID (idWorker)
                UUID:全局唯一ID (UUID)
                ID_WORKER_STR:字符串全局唯一ID (idWorker 的字符串表示)
                -->
                <property name="idType" value="AUTO" />
                <!-- 数据库类型配置 -->
                <!-- 可选参数（默认mysql） MYSQL->`mysql` ORACLE->`oracle` DB2->`db2` H2->`h2`
                   HSQL->`hsql` SQLITE->`sqlite` POSTGRE->`postgresql` SQLSERVER2005->`sqlserver2005`
                   SQLSERVER->`sqlserver` -->
                <property name="dbType" value="MYSQL" />
                <!-- 全局表为下划线命名设置 true -->
                <property name="tableUnderline" value="true" />
                <!-- 表前缀 -->
                <property name="tablePrefix" value="t_"/>
            </bean>
        </property>
    </bean>
    <!-- 3.配置Mapper代理对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- DAO接口所在包名，Spring会自动递归查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了-->
        <property name="basePackage" value="com.fh.mapper" />
        <!-- 注意事项：千万不要配置SqlSessionFactory，要配置sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>


    <!-- 5、开启组件的扫描 -->
    <context:component-scan base-package="com.fh.service" />

    <!-- 定义advice,配置传播特性、事务隔离级别、只读事务、回滚策略 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception" />
            <tx:method name="change*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception" />
            <tx:method name="batchDelete*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED"
                       rollback-for="java.lang.Exception" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>

    <!-- 切点配置 execution(* com.fh.service.impl.*.*(..)) 第一个*：任意返回值 第二个*：包下任意的类
        第三个*：类中的所有方法 (..)：任意参数 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.fh.service.impl.*.*(..))"
                      id="servicePointcut" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointcut" />
    </aop:config>

</beans>
